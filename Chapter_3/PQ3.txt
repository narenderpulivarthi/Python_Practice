1. Why are functions advantageous to have in your programs?
(Functions are helpful to group code that gets executed multiple times. Functions help
in avoiding duplicating the code and avoid complexity when updating the same code.)

2. When does the code in a function execute: when the function is defined or 
when the function is called?
(When the function is called only)

3. What staement creates a function?
('def' statement creates a function)

4. What is the difference between a function and a function call?
(A function is a block of code that executes code and returns a result. 
A function call helps the execution of a function code.)

5. How many global scopes are there in a Python program? How many local scopes?
(There can be only one global scope and many local scopes)

6. What happens to variables in a local scope when the function call returns?
(When the function call returns, the local scope is destroyed, and tehse variables are forgotten)

7. What is a return value? Can a return value be part of an expression?
(The value that a function call evaluates to is called the return value of the function.
Yes, the return value can be a part of an expression.)

8. If a function does not have a statement, what is the return value of a call to that function?
(It returns 'None' if explicit return is not mentioned)

9. How can you force a variable in a function to refer to the global variable?
(Using global statement)

10. What is the data type of None?
(NoneType data type)

11. What does the import areallyourpetsnamederic statement do?
(imports the module named areallyourpetsnamederic)

12. If you had a function named bacon() in a module named spam, how would you call i after importing spam?
(spam.bacon())

13. How can you prevent a program from crashing when it gets an error?
(Using Exception Handling i.e through try and except statements)

14. What goes in the try clause? What goes in the except clause?
(The main program execution moves into the try clause. When the error occurs the except clause
is executed.)

