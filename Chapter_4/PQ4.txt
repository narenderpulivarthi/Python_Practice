Practice Questions
1. What is []?
(syntax for the creation of List)

2. How would you assign the value 'hello' as the third value in a list stored in a variable named spam? (Assume spam contains [2, 4, 6, 8, 10].)
(spam[2] = 'hello')

For the following three questions, let’s say spam contains the list ['a', 'b', 'c', 'd'].

3. What does spam[int(int('3' * 2) // 11)] evaluate to?
(
    spam[int(int(33) // 11)]
    spam[int(3)]
    spam[3]
    output: 'd'
)

4. What does spam[-1] evaluate to?
('d')

5. What does spam[:2] evaluate to?
(['a', 'b'])

For the following three questions, let’s say bacon contains the list [3.14, 'cat', 11, 'cat', True].

6. What does bacon.index('cat') evaluate to?
(1)

7. What does bacon.append(99) make the list value in bacon look like?
([3.14, 'cat', 11, 'cat', True, 99])

8. What does bacon.remove('cat') make the list value in bacon look like?
([3.14, 11, 'cat', True, 99])

9. What are the operators for list concatenation and list replication?
(+,* respectively)

10. What is the difference between the append() and insert() list methods?
(The append() method call adds the argument to the end of the list. The insert() method can insert a value at any index in the list)

11. What are two ways to remove values from a list?
(using del statement and remove method)

12. Name a few ways that list values are similar to string values.
(indexing; slicing; and using them with for loops, with len(), and with the in and not in operators.)

13. What is the difference between lists and tuples?
(lists are mutable and tuples are immuatable)

14. How do you type the tuple value that has just the integer value 42 in it?
(tuple_eg = (42,))

15. How can you get the tuple form of a list value? How can you get the list form of a tuple value?
(tuple(list_value) and list(tuple_value) respectively)
16. Variables that “contain” list values don’t actually contain lists directly. What do they contain instead?
(reference to the list values)

17. What is the difference between copy.copy() and copy.deepcopy()?
(copy.copy() copies the list values causing the modification of list through other variable doesn't change the list value of the present variable.
But copy.copy() couldn't copy the lists inside the lists, copy.deepcopy() method works well here)